모든 함수를 fun으로 시작
return이 없는 경우 생략, 있으면 parameter뒤에 : Int 이런식으로 지정
parameter는 int a가  아닌 a : Int 이런식으로 
위에서처럼 int가 Int임
/js느낌이니
val : const, var : variable
var 뒤에 var a : Int 이렇게 안적어줘도 알아서 변수타입 지정됨
${var} 형태로 변수출력.  
그냥 $를 쓰고싶으면 앞에 \ 넣어주면 됨.. 이건 뭐 다 똑같으니..
 return (a>b) ? a:b 이런 삼항 연산자 없음
 fun big(a : Int ,  b: Int) : Int = if(a>b) a else b 대신 이렇게 사용
 
/

when(score){
        0-> println("0")
        1-> println("1")
        else -> println("idk")
    }

이런식으로 switch처럼 쓰이는 when이라는 놈이 존재.
위의 식에서는 else를 생략해도 되는데
var b=when(score){
        0->"zero"
        1->"one"
        in 2..10 -> "Big~~"
        else -> "idk"
    }

    이렇게 변수식으로 쓰이면 else를 넣어줘야함

in으로 범위 표현 가능

expression vs statement

모든 fun은 expression 왜냐 expression은 무언가를 return하는 거임 생략해도 Unit 리턴하는거고.
첫번째 when처럼 아무 리턴값이 존재하지 않는 놈은 statement

array vs List
둘다 arrayof listof로 생성
List = 1. immutable 2.mutable, array는 mutable(변경가능하다)
기본적으로 list는 interface라서 get으로 값을 얻을 순 있지만 set을 할수는없음
그래서 리스트 수정을 위해서는 MutableList사용

val로 arrayList만들어서 그놈에다가 add 하고 뭐하고 하는거는 상관이없음
왜냐? val로 만든 그 arrayList의 참조값이 바뀌는것이 아니기때문!
물론 arrayList에 다른 list같은 참조값을 주면 error

반복문
여기도 for each스타일로 for(name in students)이렇게 사용가능함
1..10 > 1포함 10까지 option으로 step지정하면 i+=2느낌
downTo 하면 큰수부터 아래로
1 until 10하면 1부터 9까지
 for((idx,name) in students.withIndex()){
        println("${idx}번째 학생 : ${name}")
    }
이런식으로 index를 변수랑 같이 할수있음. 저 인덱스는 변수크기만큼 증가
while은 똑같음

Nullable NonNull
자바는 Null pointer Exception을 컴파일할때 잡지 못했는데 
코틀린에서는 컴파일할때 잡을수있게끔해줌
var name2 : String?=null
이런식으로 타입뒤에?을 붙여주면 Nullable non null은 ?없이 쓰는 경우
var null_upper=name2?.toUpperCase() 이런식으로 ?을 안쓰면 경고뜨는데
?쓰면 사라짐.. 이게뭐냐? ?을 준상태면 name2가 null이면 null return 하고 아니면 uppercase
실행하고 리턴하는 것
# ?: 이놈을 엘비스 라고부름 (엘비스프레슬리 머리같다고;;)
var fullname=name+(name2?:"name 2 is null")
이렇게 주면 name2가 null일 경우 ?:뒤에 값을 name2대신 사용되게 함

fun ignoreNull(str : String?){
    val noNull:String =str!!
    
}
이런식으로 왔을때 할당할 값이 무조건 null이 안올경우 !! 박아주면 not null이라고 확신시켜줌

val email:String?="aud@naver"
    email?.let{
        
    }
여기서의 let은 변수선언하는 node의 let과 다름
let 앞의 리시버 객체를 Not null인경우에 람다식 내부로 옮김


class

val human=Human() 이런식으로 굳이 new 해줄 필요 없이 생성 시킬 수 있음
생성자의 경우 클래스 이름 뒤에constructor(name : String) 이런식으로 붙여준다
class Human constructor(val name : String) 이렇게 그냥 프로퍼티를 여기다 넣어줘도 되고
class Human(val name : String) 이런식으로 constructor 생략해도 된다.
String="None"이렇게 넣어주면 default를 세팅해줄수있음
init{
        println("new human is made")
    }
    얘도 위에놈 처럼 "주"생성자임 처음 만들면 딱 실행되는 그놈.

    "부" 생성자란
    constructor(name : String, age:Int):this(name){
        println("my name"+name+"  and  "+age+"years old")
    }
이런 식으로 constructor안에 뭐 프로퍼티 추가하든지 해서 쓰고 꼭 뒤에 :this()를 넣어줘야함
여기서 this()괄호 안에는 constructor인자에 쓰인 프로퍼티를 상속시켜줘야함
만약 constructor가 프로퍼티로 주 생성자에서 쓴 프로퍼티를 사용하지 않는경우 그냥 blank로
냅두면 된다.

생성자는 주생성자 > 부생성자 순으로 실행됨

상속의 경우 상속당할 클래스에게는 앞에 open을 붙여줘야 상속을 할수 있음 기본적으로 다
final 상태라서 오버라이딩을하든 상속을하든 다 open되어 있는 애들로만 할수있다.
여기서 오버라이딩은 자바에서처럼 오버라이딩할 함수 앞에 override붙여주면 된다.
super이용해서 호출하면 뭐 부모의 함수도 쓸수있음
